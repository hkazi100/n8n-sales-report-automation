{
  "name": "My workflow 2",
  "nodes": [
    {
      "parameters": {
        "triggerTimes": {
          "item": [
            {
              "hour": 9,
              "minute": 2
            }
          ]
        }
      },
      "name": "Cron Trigger",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [
        -736,
        -224
      ],
      "id": "69808a3d-9293-474c-a43c-149b15ed61a5",
      "notesInFlow": true,
      "notes": "Starts workflow automatically on a schedule.\n\nSet the time/frequency for daily sales check."
    },
    {
      "parameters": {
        "functionCode": "// --- Step 1: Collect all unique dates from the CSV ---\nconst dates = [...new Set(items.map(row => row.json.date?.toString().trim()))];\n\n// --- Step 2: Sort dates (ascending) ---\ndates.sort();\n\n// --- Step 3: Pick latest date as today, second-latest as yesterday ---\nconst today = dates[dates.length - 1];\nconst yesterday = dates[dates.length - 2];\n\n// --- Step 4: Initialize totals ---\nlet todaySales = 0;\nlet yesterdaySales = 0;\n\n// --- Step 5: Loop over rows and sum revenue ---\nfor (const row of items) {\n  const rowDate = row.json.date?.toString().trim();\n  const revenue = parseFloat(row.json.revenue || 0);\n\n  if (rowDate === today) todaySales += revenue;\n  if (rowDate === yesterday) yesterdaySales += revenue;\n}\n\n// --- Step 6: Calculate drop ---\nlet drop = 0;\nif (yesterdaySales > 0) {\n  drop = ((yesterdaySales - todaySales) / yesterdaySales) * 100;\n  drop = Math.round(drop * 100) / 100;\n}\n\n// --- Step 7: Return JSON ---\nreturn [{\n  json: {\n    today,\n    yesterday,\n    todaySales,\n    yesterdaySales,\n    drop\n  }\n}];\n"
      },
      "name": "Calculate Sales Drop",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -96,
        -224
      ],
      "id": "5d9bb42b-41b7-46b3-aa74-5b3eda71cbcc",
      "notesInFlow": true,
      "notes": "Computes todayâ€™s vs yesterdayâ€™s sales.\n\nOutputs fields like todaySales, yesterdaySales, and drop%."
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{$json[\"drop\"]}}",
              "operation": "larger",
              "value2": 20
            }
          ]
        }
      },
      "name": "Check Drop > 20%",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        160,
        -224
      ],
      "id": "f4502837-733d-475a-b4aa-b3bb0e9c0ae4",
      "alwaysOutputData": true,
      "notesInFlow": true,
      "notes": "Conditional node.\n\nChecks if sales drop exceeds 20%.\n\nRoutes workflow to alert only if drop is significant"
    },
    {
      "parameters": {
        "fromEmail": "hkazi974@gmail.com",
        "toEmail": "hkazi974@gmail.com",
        "subject": "Daily Sales AI SummaryðŸš¨",
        "text": "={{$node[\"Code in JavaScript\"].json[\"summary\"]}}\n\n\n\n",
        "html": "=<p>{{$node[\"Code in JavaScript\"].json[\"summary\"].replace(/\\n/g, \"<br>\")}}</p>\n\n\n",
        "options": {}
      },
      "name": "Email Alert",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 1,
      "position": [
        1552,
        -256
      ],
      "id": "05a77c5b-d721-4159-967d-25c3a059155f",
      "alwaysOutputData": true,
      "executeOnce": false,
      "retryOnFail": false,
      "notesInFlow": true,
      "credentials": {
        "smtp": {
          "id": "3EWzucmixvehdCmd",
          "name": "SMTP account"
        }
      },
      "notes": "Sends daily sales email.\n\nText: {{$node[\"Code in JavaScript\"].json[\"summary\"]}}\n\nHTML: <p>{{$node[\"Code in JavaScript\"].json[\"summary\"].replace(/\\n/g, \"<br>\")}}</p>\n\nMake sure JS node outputs summary."
    },
    {
      "parameters": {
        "jsCode": "// Get CSV text from Set node\nconst csvText = $node[\"Set\"].json[\"csvData\"].trim();\n\n// Split CSV into lines\nconst lines = csvText.split(/\\r?\\n/).filter(l => l.trim() !== '');\nif (lines.length === 0) {\n  return [{ json: { emailBody: \"No sales data\", csvAttachment: csvText } }];\n}\n\n// First line is header\nconst headers = lines.shift().split(',').map(h => h.trim());\n\n// Parse remaining rows\nconst out = [];\nfor (const line of lines) {\n  const cols = line.split(',').map(c => c.trim());\n  const obj = {};\n  headers.forEach((h, i) => obj[h] = cols[i] === undefined ? '' : cols[i]);\n\n  // --- Processing logic ---\n  const revenue = parseFloat(obj.revenue);\n  obj.salesCategory = revenue > 5000 ? \"High\" : \"Low\";\n  obj.totalRevenue = revenue * 1.1;\n\n  out.push({ json: obj });\n}\n\n// --- Build HTML emailBody with table ---\nlet emailText = `<h3>Products and Sales</h3>\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\n<tr>\n<th>Product</th>\n<th>Quantity</th>\n<th>Sales Category</th>\n<th>Total Revenue</th>\n</tr>`;\n\nfor (const obj of out) {\n  emailText += `<tr>\n<td>${obj.json.product}</td>\n<td>${obj.json.quantity}</td>\n<td>${obj.json.salesCategory}</td>\n<td>${obj.json.totalRevenue}</td>\n</tr>`;\n}\n\nemailText += \"</table>\";\n\n// --- Build CSV attachment ---\nlet csvAttachment = Object.keys(out[0].json).join(\",\") + \"\\n\";\nfor (const obj of out) {\n  csvAttachment += Object.values(obj.json).join(\",\") + \"\\n\";\n}\n\n// Add emailBody to first item\nout[0].json.emailBody = emailText;\n\n// Add CSV as binary for attachment\nout[0].binary = {\n  file: {\n    data: Buffer.from(csvAttachment, \"utf8\").toString(\"base64\"),\n    mimeType: \"text/csv\",\n    fileName: \"sales_report.csv\"\n  }\n};\n\nreturn out;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -320,
        -224
      ],
      "id": "b041393c-ad5b-4bcc-a73e-4612a1dbcc0c",
      "name": "Parse CSV",
      "alwaysOutputData": true,
      "notesInFlow": true,
      "notes": "Reads the sales CSV file and converts it into JSON format.\n\nMakes the data usable for calculations in later nodes."
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "055cdffa-8cf4-48db-bac1-86208440ac59",
              "name": "csvData",
              "value": "=date, product, quantity, revenue\n2025-09-10, Shirts, 30, 4500\n2025-09-10, Shoes, 15, 6000\n2025-09-11, Shirts, 20, 3000\n2025-09-11, Shoes, 10, 4000\n\n",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -528,
        -224
      ],
      "id": "9cf02f39-c58c-45fd-884d-fb2610f19001",
      "name": "Set",
      "notesInFlow": true,
      "notes": "Sets initial variables, like file path or dates, for the workflow.\n\nActs as input for the CSV parser"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "19b547eb-719b-416c-8151-4e0e7283b73f",
              "name": "=chatInput",
              "value": "=Summarize the daily sales drop from {{$node[\"Calculate Sales Drop\"].json[\"yesterdaySales\"]}} to {{$node[\"Calculate Sales Drop\"].json[\"todaySales\"]}} in 2â€“3 sentences. Do NOT include recommendations, action plans, or additional context. Just describe the drop and possible reason(s) concisely. End the summary after 2â€“3 sentences.\n\n\n\n\n\n",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        496,
        -224
      ],
      "id": "a43312f5-209b-45cc-8433-1b6e5df9c4b1",
      "name": "Prepare Prompt",
      "alwaysOutputData": true,
      "notesInFlow": true,
      "notes": "Prepares text prompt for the AI model.\n\nCombines sales data and any recommendations."
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.3,
      "position": [
        640,
        -528
      ],
      "id": "f95e43ab-4e84-45e5-b0c9-331b66c77f65",
      "name": "When chat message received",
      "webhookId": "d0b6c77b-f428-4408-a6a7-8a2eaff246cc"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $node[\"Prepare Prompt\"].json[\"chatInput\"] }}\n\n\n",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "type": "HumanMessagePromptTemplate",
              "message": "=\n"
            },
            {
              "type": "AIMessagePromptTemplate",
              "message": "="
            }
          ]
        },
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        880,
        -272
      ],
      "id": "aa8368f4-8329-425a-abe8-47ca2ef0f1f3",
      "name": "Basic LLM Chain",
      "alwaysOutputData": true,
      "notesInFlow": true,
      "notes": "This node receives the prepared sales data and instructions as plain text from the previous node. It generates a concise summary of daily sales and 2 actionable recommendations. Minor warnings or red/uncertain indicators can be ignored."
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmOpenHuggingFaceInference",
      "typeVersion": 1,
      "position": [
        1136,
        32
      ],
      "id": "34df1728-ba55-4fac-ac78-34abe2d979a2",
      "name": "Hugging Face Inference Model",
      "credentials": {
        "huggingFaceApi": {
          "id": "Kc60TutXIwQh4oeR",
          "name": "HuggingFaceApi account 5"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "let text = $node[\"Basic LLM Chain\"].json[\"text\"];\nlet lines = text.split(\"\\n\");\nlet seen = {};\nlet result = [];\nfor(let line of lines){\n  if(!seen[line] && line.trim() !== \"\"){\n    seen[line] = true;\n    result.push(line);\n  }\n}\nreturn [{ summary: result.join(\"\\n\") }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1248,
        -256
      ],
      "id": "e123336b-513c-40de-9081-d143725f9805",
      "name": "Code in JavaScript",
      "notesInFlow": true,
      "notes": "This node generates a summary and recommendations for daily sales. Output may be longer than intended; only the first few lines are displayed for clarity."
    },
    {
      "parameters": {
        "content": "# Data Input ðŸ“Š\n\n\n## Cron Trigger\n\nStarts the workflow automatically on a daily schedule.\nEnsures sales data is checked every day without manual intervention.\n\n\n## Set (Initial Variables)\n\nStores workflow variables:\n- CSV file path\n- Todayâ€™s and yesterdayâ€™s dates\nThese values are used in subsequent nodes for calculations and AI processing.\n\n\n## Parse CSV\n\nReads the CSV file and converts it into JSON format.\nMakes sales data easy to use for calculations and AI summaries.\n\n",
        "height": 800,
        "width": 624,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -816,
        -768
      ],
      "typeVersion": 1,
      "id": "71ae07b5-2ecb-4007-996a-1f554359056f",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Calculation & FilteringðŸ”¢\n\n\n## Calculate Sales Drop\n\nCompares todayâ€™s vs yesterdayâ€™s sales.\nOutputs:\n- todaySales\n- yesterdaySales\n- drop% (percentage drop)\nDetermines if an alert is needed.\n\n\n## Check Drop > 20%\n\nConditional node that triggers the alert only if sales drop is significant (>20%).\nPrevents unnecessary notifications for minor fluctuations.",
        "height": 656,
        "width": 528,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -144,
        -256
      ],
      "typeVersion": 1,
      "id": "cb11a6ad-8d9d-4cf8-9abf-2cd11b437f7d",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "# AI Summary & FormattingðŸ¤–\n\n\n## Prepare Prompt\n\n Generates a short AI prompt using sales data.\nInstructs AI to create a 2â€“3 sentence summary with no recommendations or action plans.\n\n\n## HuggingFace AI / Basic LLM Chain\n\nGenerates a human-readable summary of the sales drop.\nOutputs concise text ready for formatting.\n\n\n## Code in JavaScript\n\nCleans and formats AI output.\nRemoves extra spaces and line breaks, producing a clean summary field for email.",
        "height": 576,
        "width": 896,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        480,
        -48
      ],
      "typeVersion": 1,
      "id": "a082db19-9de9-4f8d-bcd3-4785619e2688",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "# Notification ðŸ“§\n\n## Email Alert\n\nNote\n\nSends the AI-generated summary in a clean email.\nHTML formatting ensures line breaks display correctly.\nTriggers only when sales drop exceeds the threshold",
        "height": 432,
        "width": 416,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1456,
        -528
      ],
      "typeVersion": 1,
      "id": "153d73dc-867b-4a96-b292-cd87aaf4ce9d",
      "name": "Sticky Note3"
    }
  ],
  "pinData": {},
  "connections": {
    "Calculate Sales Drop": {
      "main": [
        [
          {
            "node": "Check Drop > 20%",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Drop > 20%": {
      "main": [
        [
          {
            "node": "Prepare Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cron Trigger": {
      "main": [
        [
          {
            "node": "Set",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse CSV": {
      "main": [
        [
          {
            "node": "Calculate Sales Drop",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set": {
      "main": [
        [
          {
            "node": "Parse CSV",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Prompt": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Hugging Face Inference Model": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "Email Alert",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "c66a5197-f420-4ecc-94ea-853b9128ad23",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "f441e4bb673a1e10e15a6b6bb3481b6b848587f8e506678c9913d250122ff207"
  },
  "id": "iyf18ib7gkbKKP58",
  "tags": []
}